{
    "compilerOptions": {
        "baseUrl": "./",
        "paths": {
            "@component/*": ["./src/component/*"]
        },
        /* 基本选项 */
        "target": "esnext", // 指定 ECMAScript 目标版本: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017', or 'ESNEXT'
        "module": "ES6", // 指定生成哪个模块系统代码： "None"， "CommonJS"， "AMD"， "System"， "UMD"， "ES6"或 "ES2015"。
        // "lib": [], // 编译过程中需要引入的库文件的列表, 一般不要配置此选项
        "allowJs": false, // 允许编译 javascript 文件
        "checkJs": false, // 报告 javascript 文件中的错误, 必须配合allowJs使用
        "jsx": "preserve", // TypeScript具有三种JSX模式：preserve，react和react-native。 这些模式只在代码生成阶段起作用 - 类型检查并不受影响。 在preserve模式下生成代码中会保留JSX以供后续的转换操作使用（比如：Babel）。 另外，输出文件会带有.jsx扩展名。 react模式会生成React.createElement，在使用前不需要再进行转换操作了，输出文件的扩展名为.js。 react-native相当于preserve，它也保留了所有的JSX，但是输出文件的扩展名是.js。
        "declaration": true, // 生成相应的 '.d.ts' 文件
        "sourceMap": true, // 生成相应的 '.map' 文件
        // "outFile": "./", // 将输出文件合并为一个文件
        "outDir": "./es",  // 指定输出目录
        "removeComments": false, // 删除编译后的所有的注释
        "noEmit": false, // 不生成输出文件
        "importHelpers": true, // 从 tslib 导入辅助工具函数
        "isolatedModules": false, // 将每个文件做为单独的模块 （与 'ts.transpileModule' 类似）.

        /* 严格的类型检查选项 */
        "strict": true,  // 启用所有严格类型检查选项
        "alwaysStrict": true, // 以严格模式检查每个模块，并在每个文件里加入 'use strict'
        "noImplicitAny": true, // 在表达式和声明上有隐含的'any'类型时报错。
        "strictNullChecks": true, // 在严格的 null检查模式下， null和 undefined值不包含在任何类型里，只允许用它们自己和 any来赋值（有个例外， undefined可以赋值到 void）
        "noImplicitThis": true,  // 当 this 表达式值为 any 类型的时候，生成一个错误

        /* 额外的检查 */
        "noUnusedLocals": true, // 若有未使用的局部变量则抛错。
        "noUnusedParameters": true, // 若有未使用的参数则抛错
        "noImplicitReturns": true,             // 并不是所有函数里的代码都有返回值时，抛出错误
        "noFallthroughCasesInSwitch": true,    // 报告switch语句的fallthrough错误。（即，不允许switch的case语句贯穿）

        /* 模块解析选项 */
        "moduleResolution": "node", // 决定如何处理模块。或者是"Node"对于Node.js/io.js，或者是"Classic"（默认）。查看模块解析了解详情。
        "allowSyntheticDefaultImports":true, // 允许从没有设置默认导出的模块中默认导入。这并不影响代码的输出，仅为了类型检查。
        "inlineSourceMap": false,               // 生成单个 soucemaps 文件，而不是将 sourcemaps 生成不同的文件

        /* 其他选项 */
        "experimentalDecorators": true,        // 启用装饰器
        "emitDecoratorMetadata": true,         // 为装饰器提供元数据的支持
    },
    "include": [ // 如果"files"和"include"都没有被指定，编译器默认包含当前目录和子目录下所有的TypeScript文件（.ts, .d.ts 和 .tsx），排除在"exclude"里指定的文件
        "src/**/*"
    ],
    "exclude": [ //  "files"指定一个包含相对或绝对文件路径的列表。 "include"和"exclude"属性指定一个文件glob匹配模式列表
        "node_modules",
        "util"
    ],
    "compileOnSave": true // 让IDE在保存文件的时候根据tsconfig.json重新生成文件
}
